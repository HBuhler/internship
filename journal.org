* Introduction
This file contains the reporting for my beloved internship done on
this topic on that year. (after a few weeks, once you really
understand your internship, you should write a few paragraphs about
the context, problem and motivation of your work, with some
possible use cases. But don't do that right now)
* Finding
** EQ
From : Methods and Tools for Exploring Novice Compilation Behaviour
(Matthew C. Jadud) For a pair of compilation event : none have error
-> 0 ; different error -> 8 ; same error -> 11. Normalized to
0->1. Use the mean on a session.
*** Used in :
- Methods and Tools for Exploring Novice Compilation Behaviour
- No Tests Required: Comparing Traditional and Dynamic Predictors of Programming Success
- Predicting At-Risk Novice Java Programmers Through the Analysis of
  Online Protocols
** Warwin Algorithm
From : Predicting Performance in an Introductory Programming Course by
Logging and Analyzing Student Programming Behavior EQ sequel.  Use
pair of event, grade according to if they are : both error, the same
error, same line, and time compared to other student with the same
error.
*** Used in : 
- Predicting Performance in an Introductory Programming Course by
  Logging and Analyzing Student Programming Behavior
- No Tests Required: Comparing Traditional and Dynamic Predictors of
  Programming Success
** Cyclomatic Complexity (Mc Cabe)
- from A Complexity Measure, Thomas J. McCabe, dec 1976
- M = E - N + 2P
M : cyclomatic complexity
E : nb of edges in the flow chart
N : nb of nodes
P : nb of connected component
- M = nb of if, while, for and case
- "theorem 1 : In a strongly connected graph G, the cyclo- matic
  number is equal to the maximum number of linearly independent
  circuits."
*** Used in : 
- Characterisation of CS1 Student Programming

** Npath Complexity
- The NPath complexity of a method is the number of acyclic execution
paths through that method. A threshold of 200 is generally considered
the point where measures should be taken to reduce complexity and
increase readability. (
http://pmd.sourceforge.net/pmd-5.3.1/pmd-java/rules/java/codesize.html#NPathComplexity)
- ie : number of path in the flow of the code
- seems more accurate, but way more complex to implement 

** Hidden Markov Model
- see "An Introduction to Hidden Markov Models"
*** TODO Forward-Backward procedure
- algo for computing the prob of an observation sequence on a given
  model
*** TODO Baum-Welch method
- iterative algo for re-estimate HMM parameters

** BlueJ
- bluej.org
- Graphic Interface : simplified UML graph (class, inheritance &
dependency)
- each class can be open in a standard IDE (colourisation,
auto-indentation) 
- Only one error is displayed at compilation (with
highlight on the line), the display disappear after hitting a key.
- Data are gathered at compilation. Its included timestamp, code and the error.

** Recurrent Neural Network
- kind of deep neural network (neural network with some hidden layers,
  ie non-input and non-output layers)
- allow cycle in the network
- LSTM are network where each node is a block ; each block is a little
  network, with gate : input, output, keep memory, wipe memory
- note : RNN may be recursive neural network

** coron
- tool from Team Orpailleur
- collect Association rule ( {frequent set} -> {frequent set}), allow
  filter (support, or post-filtering on rule)


** Bibliography
*** Predicting At-Risk Novice Java Programmers Through the Analysis of Online Protocols
**** Authors
- Emily S. Tabanao
- Ma. Mercedes T. Rodrigo
- Matthew C. Jadud
**** Venue
- ICER (International Computing Education Research Workshop)
- 2011/08/08
**** Note
Attempt to evaluate indicators of the levels of novice programmers.
Students used BlueJ. Metrics used are : type of error, average time
between compilation, EQ (which grade pair of compil, by their error
(both error, same error,...)  Finding : Metrics used seems to be able
to characterize group of student. Data correlated with midterm score :
total error (-.41), average time between compil (.27), EQ (-.55)


*** Predicting Performance in an Introductory Programming Course by Logging and Analyzing Student Programming Behavior
**** Authors
- Christopher Watson
- Frederick W.B. Li
- Jamie L. Godwin

**** Venue
- 2013 IEEE 13th International Conference on Advanced Learning Technologies (ICALT)
- 2013/08/15  2013/08/18 

**** Note
Attempt to use dynamic metrics to predict variance in coursework
marks. 
Student used BlueJ. Improvement set : better pair of
event. Use pair of compilation only if there is a modification on the
same file, with difference in the code, without comment/deletion
fixes.  Error messages are generalized ; time by error is estimated
(if the student work on multiple file & error) metrics used : Watwin
algo (EQ sequel). Use pair of event, grade according to if they are :
both error, the same error, same line, and time compared to other
student with the same error.  Watwin seems to work better that EQ,
even when the data are filtered for EQ (same file, no commented
fixe,...)


*** No Tests Required: Comparing Traditional and Dynamic Predictors of Programming Success
**** Authors
- Christopher Watson
- Frederick W.B. Li
- Jamie L. Godwin

**** Venue
- CSE Computer Science Education
- 2014/03/05
**** Note
Test of classics metrics. Comparaison of static metrics (gender,...)
and dynamic one (Watwin, EQ & co).  Student used BlueJ.  Result :
dynamic metrics seems generally better. Strongest metric founded :
Watwin. See article for the graph comparaison.


*** Characterisation of CS1 Student Programming
**** Authors
- N. Bosch
- D. Towell
- J. Homer
**** Note
Study on the process followed by students for assignements. Students
could submit repeatebly their work until a deadline, and have a
feedback the test they failed and their errors.  Metrics used : total
time by assignement, number of submission, nb lines of codes,
cyclomatic complexity, nb declared variable Goal and conclusion seems
off topic (base on the fact that student submit a lot) ; but
Cyclomatic complexity may be useful


*** Coarse-Grained Detection of Student Frustration in an Introductory Programming Course
**** Authors
- Ma. Mercedes T. rodrigo
- Ryan Shaun J. d. Baker
**** Venue
- ICER International Computing Education Research Workshop
- 2009/08/10
**** Note
Attempt to detect automatically student frustration. Methods : two observers noted the state and behavior of ten students by sessions ; students used BlueJ, and data like error messages, line of error, source code and timespamp was recorded.
Result : they find a correlation bewteen frustration and : consecutive compilation wtih the same edit location, same error, time between compil, total errors, number of compilation.


*** A First Look at Novice Compilation Behaviour Using BlueJ
**** Authors
- Matthew C. Jadud
**** Venue 

- 2007/02/16
**** Note
- Study of novice behaviour. Student used BlueJ.
- event labelled as : error-free / syntax error, and time since previous compil
- Generally, student recompile quickly after an error, and take 2 min
  or more after a sucessful compilation (generally with 100 + char modified)
- Stat on type of error, and most common reason (mainly typographic error)


*** Methods and Tools for Exporing Novice Compilation Behaviour
**** Authors
- Matthew C. Jadud
**** Venue
- ICER (International Computing Education Research Workshop)
- 2006-09-09
**** Note
- Student used BlueJ. Very similar to previous work. Introduce EQ.



*** BlueFix: Using Crowd-Sourced Feedback to Support Programming Students in Error Diagnosis and Repair
**** Authors
- Christopher Watson
- Frederick W. B. Li
- Jamie L. Godwin
**** Venue
Advances in Web-Based Learning - ICWL 2012

**** Note
- Presentation of BlueFix : a tool integrated in BlueJ, designed to
  assist student with error diagnosis and repair.
- Basic gradual help : 3 level of help, which are given of successive error
- Fixes are given using a database of previous correct log ; they
  search for fixes with same generalized error, a string matching algo
  (Jaro Winkler)(after generalizing variable), and a system of "like"
  from student
  previous work compared parse tree (which take a lot of time)
- Fixes are collected by finding correct tuples of compil : error to
  correct, with code added (no comment/delete)
- Used EQ ; mean EQ  "could statistically significantly predict their ability score"


*** Modeling How Students Learn to Program
**** Authors 
- Chris Piech
- Mehran Sahami
- Daphne Koller
- Stephen Cooper
- Paulo Blikstein
**** Venue
- CSEComputer Science Education
- 2012-02-29
**** Note
- Study of how student arrive at their final solution, propose a model
  which predict students'result
- Data are collected via a modified Eclipse, which take snapshots of
  the code on compilation or save
- Two assignements were used : one with "Karel the Robot" in a
  java-based language, which doesn't include variable or parameters ;
  the other is a breakout in Java
- To build model, they need programms "similarity". Three metrics are
  used (Bag of words difference, API call dissimilarity, AST change
  severity)
- a student's progress is modeled by a hidden markov model : they
  first cluster code snapshot in order to find the state of the HMM ;
  then cluster the path of students to find different group.
- They find 3 ggroup (and construct 3 HMM), that can predict later
  success of student


*** An Introduction to Hidden Markov Models
**** Authors
- L.R. Rabiner
- B. H. Juang
**** Venue
- ASSP Magazine, IEEE  (Volume:3 ,  Issue: 1 ) 
- 1986/01
**** Note
- HMM def : it's a doubly stochastic process with an underlying
  stochastic process that is not observable (hidden, the state) but
  can be observed through another set of stochastic processes that
  produce the sequence of observed symbols.
***** HMM elements
- Q : set of N states
- A : state transistion probability distribution (at each clock time, a new state
  (or the same) is entered, depending only of the previous state
- B : observation symbol probability distribution (depends on the current state)
- an initial state distribution


***** The "three problems for HMM's"
- (1) given an observation sequence and a model, how do we compute the
  probability of the observation sequence (use the "forward-backward procedure")
- (2) Given an observation sequence how we choose a state sequence which
  is optimal in some meaningul sense
- (3) How we adjust the models parameters to maximize the probability
  of the observation sequence (-> 1) (Baum-Welch procedure)
  

*** Learning Program Embeddings to Propagate FeedBack on Student Code
**** Authors
- Chris Piech
- Jonathan Huang
- Andy Nguyen
- Mike Phulsuksombati
- Mehran Sahami
- Leonidas Guibas

**** Venue
-22/05/2015
**** Note
- Try to propagate feedback, i.e., given a number of annoted student
  submissions, try to give a feedback to a maximum of student
- Use three structure to represent the code of student
- the first represent the functionnality of a programm (NPM)
- the second add structure and style (NPM-RNN)
- the last model (RNN) is just the NPM-RNN without the NPM part
***** NPM model
- Use vector to represent the world, before (pre-conditon P) and after
  (post-condtion Q) execution
- encode & decode (non-linearly) these vector : fp = phi(Wenc . P +
  benc), Q' = phi(Wdec . fp + bdec)
- represent the code A as a matrix Ma : fq = Ma . fp
- Learn Wenc, Wdec, benc, bdec, and all the matrix Ma on student
  submission, optimizing on the prediction of post-condtion and
  precision of encode/decode (P' ~= P ?)
- The code A is seen as a linear relation, but fp & fq are a
  non-linear representation, in order to capture a maximum of the code

***** NPM-RNN model
- First, need to learn the matrix Ma from NPM
- associate to each programm a king of recursive network, following
  the AST structure
- At each node j , construct recursvly a matrix aj = phi(sum(Womega
  . afils) + bomega + Mj), ie the usm of : the children factor a
  constante to learn, a constant to learn, and the matrix Ma
- Note that each constant is associate with the type of node : if, while,....
- On top of that, you train a classifier in order to predict feedback,
  seen as N binary prediction, and learn Womega,... by optimizing on this predicion


*** Automously Generating Hints by Inferring Problem Solving Policies
**** Authors
- Chries Piech
- Mehran Sahami
- Jonathan Huang
- Leonidas Guibas
**** Venue
- 2015-03-14
- ACM New York, NY, USA ©2015
**** Note
- Use data of hour of code challenge : langage without variables,
  designed for children
- Try to find path of partial solution, as an expert would suggest ;
  and try to communicate that information
- Using frequency of a transition is biased : student who make a
  mistake are likely to choose a bad solution
- Instead, use a historal count (how many time a partial solution was
  submitted), as it's done by all type of student
- propose a lot of algorithm for the path, based on the partial count
  (poisson, independent); using a (simplified) markov decision problem,...


*** Deep Knowledge Tracing
**** Authors
- Chris Piech 
- Jonathan Spencer
- Jonathan Huang
- Surya Ganguli
- Mehran Sahami
- Leonidas Guibas
- Jasch Sol-Dickstein
**** Venue
-19 june 2015
**** Note
- Use two neural network : a basic and a LSTM.



* Journal
** Week 24 april
*** Things done
- setup of workspace (git, emacs,...)
- start of review of related literature
*** Work Planned [3/3]
- [X] study statistics involved in the different article (linear
  regression (tool Weka ?))
- [X] complete section BlueJ, Cyclomatic Complexity
- [X] articles to re-rewiew and prob include in biblio (a first look
  at novice compilation behaviour using blueJ (DONE), methods and tools for
  exploring novice compilation behaviour (done), bluefix : using
  crowd-sourced feed-back to support programming students in error
  diagnosis and repair (done))
  
** Week 4 may
*** things done
- completed section BlueJ, Cyclomatic Complexity, Npath Complexity
- articles re-rewiew and included in biblio (a first look
  at novice compilation behaviour using blueJ (DONE), methods and tools for
  exploring novice compilation behaviour (done), bluefix : using
  crowd-sourced feed-back to support programming students in error
  diagnosis and repair (done))
- added "Modeling How Students Learn to Program" to biblio
- basic study of statistics
- read the current harvester
*** work planned [3/3]
- [X] integrate an "idle" event in the PLM [postponed to next week]
- [X] begin a new harvester for the PLM data (basic structure for further use)
- [X] find a sound book on Hidden Markov Model (and rewrite a part of
  biblio on Modeling How StudentLearn To Program"
** Week 11 may
*** things done
- begin a new harvester for the PLM data (basic structure for further use)
- find a sound book on Hidden Markov Model (and rewrite a part of
  biblio on Modeling How StudentLearn To Program)
- add An Introduction to Hidden Markov Models to biblio
*** work planned [1/1]
- [X] integrate an idle state in the PLM (rescheduled)
** Week 18 may
*** things done
- basic work with coron
- some refactoring on the harvester (iterator structure rather than a parser)
- the harvester can now produce input for coron (exo tried and failed,
  EQ higther than a threshold) ; it can now select students who have a
  least try a set of exo
- The output of coron seems consistent ; but use two different metrics
  don't seems to work well, and the output is still quite massive
*** work planned [1/2]
- [X] idle event in plm
- [ ] find a way to compare input for coron 
** Week 25 may
*** things done
- Idle Event in PLM, and gathered by the harvester
- base of scalaHandler re-used, some general cleaning on the harvester

** Week 1 june
*** work done
- Review of Learning Program Embeddings To Propagate Feedback on
  student code, automously generating honts by inferring problem
  solving policies, deconstructing disengagement : analysing learner
  subpopulation in massive open online courses (work of chris
  piech). The last will probably not be useful
- got data to link branchs to grade rate.

*** work planned [4/5]
- [X] test idle event ; should be correctly gathered, see for futher
  use ; double check potential bug with use of Instant
- [ ] continue Scala Handler, may be useful to EQ, and will be for
  Watwin (same error,...)
- [X] find group of student/exo to have more pertinent test (may need futher work)
- [X] add article from Chris Piech to biblio
- [X] add Coron somewhere in journal
** week 8 june
*** work done
- TODO last week + this week
*** work Planned [3/3]
- [X] See Previous Todo list, a lot of technical work
- [X] integrate to biblio (from summary) : chries Piech biblio,
  probably a little on neural network,
- [X] get back to compare metrcis ; try to have a functionnal proto ? (new objective)
** week 15 june  
- merge between my new harvester and the code from Alexandre
- Harvester cleaned
- Chris Piech biblio completed
** week 29 june
*** work planned
- re-read biblio to see what can be useful for the new objective
