* Introduction
This file contains the reporting for my beloved internship done on
this topic on that year. (after a few weeks, once you really
understand your internship, you should write a few paragraphs about
the context, problem and motivation of your work, with some
possible use cases. But don't do that right now)
* Finding
** EQ
From : Methods and Tools for Exploring Novice Compilation Behaviour
(Matthew C. Jadud) For a pair of compilation event : none have error
-> 0 ; different error -> 8 ; same error -> 11. Normalized to
0->1. Use the mean on a session.
*** Used in :
- Methods and Tools for Exploring Novice Compilation Behaviour
- No Tests Required: Comparing Traditional and Dynamic Predictors of Programming Success
- Predicting At-Risk Novice Java Programmers Through the Analysis of
  Online Protocols
** Warwin Algorithm
From : Predicting Performance in an Introductory Programming Course by
Logging and Analyzing Student Programming Behavior EQ sequel.  Use
pair of event, grade according to if they are : both error, the same
error, same line, and time compared to other student with the same
error.
*** Used in : 
- Predicting Performance in an Introductory Programming Course by
  Logging and Analyzing Student Programming Behavior
- No Tests Required: Comparing Traditional and Dynamic Predictors of
  Programming Success
** Cyclomatic Complexity (Mc Cabe)
- from A Complexity Measure, Thomas J. McCabe, dec 1976
- M = E - N + 2P
M : cyclomatic complexity
E : nb of edges in the flow chart
N : nb of nodes
P : nb of connected component
- M = nb of if, while, for and case
- "theorem 1 : In a strongly connected graph G, the cyclo- matic
  number is equal to the maximum number of linearly independent
  circuits."
*** Used in : 
- Characterisation of CS1 Student Programming

** Npath Complexity
- The NPath complexity of a method is the number of acyclic execution
paths through that method. A threshold of 200 is generally considered
the point where measures should be taken to reduce complexity and
increase readability. (
http://pmd.sourceforge.net/pmd-5.3.1/pmd-java/rules/java/codesize.html#NPathComplexity)
- ie : number of path in the flow of the code
- seems more accurate, but way more complex to implement 


** BlueJ
- bluej.org
- Graphic Interface : simplified UML graph (class, inheritance &
dependency)
- each class can be open in a standard IDE (colourisation,
auto-indentation) 
- Only one error is displayed at compilation (with
highlight on the line), the display disappear after hitting a key.
- Data are gathered at compilation. Its included timestamp, code and the error.



** Bibliography
*** Predicting At-Risk Novice Java Programmers Through the Analysis of Online Protocols
**** Authors
- Emily S. Tabanao
- Ma. Mercedes T. Rodrigo
- Matthew C. Jadud
**** Venue
- ICER (International Computing Education Research Workshop)
- 2011/08/08
**** Note
Attempt to evaluate indicators of the levels of novice programmers.
Students used BlueJ. Metrics used are : type of error, average time
between compilation, EQ (which grade pair of compil, by their error
(both error, same error,...)  Finding : Metrics used seems to be able
to characterize group of student. Data correlated with midterm score :
total error (-.41), average time between compil (.27), EQ (-.55)


*** Predicting Performance in an Introductory Programming Course by Logging and Analyzing Student Programming Behavior
**** Authors
- Christopher Watson
- Frederick W.B. Li
- Jamie L. Godwin

**** Venue
- 2013 IEEE 13th International Conference on Advanced Learning Technologies (ICALT)
- 2013/08/15  2013/08/18 

**** Note
Attempt to use dynamic metrics to predict variance in coursework
marks. 
Student used BlueJ. Improvement set : better pair of
event. Use pair of compilation only if there is a modification on the
same file, with difference in the code, without comment/deletion
fixes.  Error messages are generalized ; time by error is estimated
(if the student work on multiple file & error) metrics used : Watwin
algo (EQ sequel). Use pair of event, grade according to if they are :
both error, the same error, same line, and time compared to other
student with the same error.  Watwin seems to work better that EQ,
even when the data are filtered for EQ (same file, no commented
fixe,...)


*** No Tests Required: Comparing Traditional and Dynamic Predictors of Programming Success
**** Authors
- Christopher Watson
- Frederick W.B. Li
- Jamie L. Godwin

**** Venue
- CSE Computer Science Education
- 2014/03/05
**** Note
Test of classics metrics. Comparaison of static metrics (gender,...)
and dynamic one (Watwin, EQ & co).  Student used BlueJ.  Result :
dynamic metrics seems generally better. Strongest metric founded :
Watwin. See article for the graph comparaison.


*** Characterisation of CS1 Student Programming
**** Authors
- N. Bosch
- D. Towell
- J. Homer
**** Note
Study on the process followed by students for assignements. Students
could submit repeatebly their work until a deadline, and have a
feedback the test they failed and their errors.  Metrics used : total
time by assignement, number of submission, nb lines of codes,
cyclomatic complexity, nb declared variable Goal and conclusion seems
off topic (base on the fact that student submit a lot) ; but
Cyclomatic complexity may be useful


*** Coarse-Grained Detection of Student Frustration in an Introductory Programming Course
**** Authors
- Ma. Mercedes T. rodrigo
- Ryan Shaun J. d. Baker
**** Venue
- ICER International Computing Education Research Workshop
- 2009/08/10
**** Note
Attempt to detect automatically student frustration. Methods : two observers noted the state and behavior of ten students by sessions ; students used BlueJ, and data like error messages, line of error, source code and timespamp was recorded.
Result : they find a correlation bewteen frustration and : consecutive compilation wtih the same edit location, same error, time between compil, total errors, number of compilation.


*** A First Look at Novice Compilation Behaviour Using BlueJ
**** Authors
- Matthew C. Jadud
**** Venue 

- 2007/02/16
**** Note
- Study of novice behaviour. Student used BlueJ.
- event labelled as : error-free / syntax error, and time since previous compil
- Generally, student recompile quickly after an error, and take 2 min
  or more after a sucessful compilation (generally with 100 + char modified)
- Stat on type of error, and most common reason (mainly typographic error)


*** Methods and Tools for Exporing Novice Compilation Behaviour
**** Authors
- Matthew C. Jadud
**** Venue
- ICER (International Computing Education Research Workshop)
- 2006-09-09
**** Note
- Student used BlueJ. Very similar to previous work. Introduce EQ.



*** BlueFix: Using Crowd-Sourced Feedback to Support Programming Students in Error Diagnosis and Repair
**** Authors
- Christopher Watson
- Frederick W. B. Li
- Jamie L. Godwin
**** Venue
Advances in Web-Based Learning - ICWL 2012

**** Note
- Presentation of BlueFix : a tool integrated in BlueJ, designed to
  assist student with error diagnosis and repair.
- Basic gradual help : 3 level of help, which are given of successive error
- Fixes are given using a database of previous correct log ; they
  search for fixes with same generalized error, a string matching algo
  (Jaro Winkler)(after generalizing variable), and a system of "like"
  from student
  previous work compared parse tree (which take a lot of time)
- Fixes are collected by finding correct tuples of compil : error to
  correct, with code added (no comment/delete)
- Used EQ ; mean EQ  "could statistically significantly predict their ability score"


*** Modeling How Students Learn to Program
**** Authors 
- Chris Piech
- Mehran Sahami
- Daphne Koller
- Stephen Cooper
- Paulo Blikstein
**** Venue
- CSEComputer Science Education
- 2012-02-29
**** Note
- Study of how student arrive at their final solution, propose a model
  which predict students'result
- Data are collected via a modified Eclipse, which take snapshots of
  the code on compilation or save
- Two assignements were used : one with "Karel the Robot" in a
  java-based language, which doesn't include variable or parameters ;
  the other is a breakout in Java
- To build model, they need programms "similarity". Three metrics are
  used (Bag of words difference, API call dissimilarity, AST change
  severity)
- a student's progress is modeled by a hidden markov model ; 
- Black magic occur, and they find milestone/state in the progress of
  students ; the path used by a student in this state is correlated to
  his results in assignement

* Journal
** Week 24 april
*** Things done
- setup of workspace (git, emacs,...)
- start of review of related literature
*** Work Planned [2/3]
- [ ] study statistics involved in the different article (linear
  regression (tool Weka ?))
- [X] complete section BlueJ, Cyclomatic Complexity
- [X] articles to re-rewiew and prob include in biblio (a first look
  at novice compilation behaviour using blueJ (DONE), methods and tools for
  exploring novice compilation behaviour (done), bluefix : using
  crowd-sourced feed-back to support programming students in error
  diagnosis and repair (done))
  
** Week 4 may
*** things done
- completed section BlueJ, Cyclomatic Complexity, Npath Complexity
- articles re-rewiew and included in biblio (a first look
  at novice compilation behaviour using blueJ (DONE), methods and tools for
  exploring novice compilation behaviour (done), bluefix : using
  crowd-sourced feed-back to support programming students in error
  diagnosis and repair (done))
- added "Modeling How Students Learn to Program" to biblio
- basic study of statistics
- read the current harvester
*** work planned [0/3]
- [ ] integrate an "idle" event in the PLM
- [ ] begin a new harvester for the PLM data (basic structure for further use)
- [ ] find a sound book on Hidden Markov Model (and rewrite a part of
  biblio on Modeling How StudentLearn To Program"
